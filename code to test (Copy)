# HIGH DROP -----------------------------------------------------------------------------------------------------------------

# initial condition
for dof in DOFs:
    m.dq[1,dof].fix(0) # rest
    if dof != 'y':
        m.q[1,dof].fix(0) # neutral posture
m.footy[1,'front'].fix(3.1)
m.footy[1, 'rear'].fix(3.1)

for n in range(1,N+1):
    for j in joints:
        m.fj[n,j].fix(0) # no forces


# # LOW DROP -----------------------------------------------------------------------------------------------------------------

# initial condition
for dof in DOFs:
    m.dq[1,dof].fix(0) # rest
    if dof not in ['y']:
        m.q[1,dof].fix(0) # neutral posture
m.footy[1, 'front'].fix(0.15) # start near the ground
m.footy[1, 'rear'].fix(0.15) # start near the ground

#m.footy[15, 'front'].fix(0) # force it to land
#m.footy[15, 'rear'].fix(0) # force it to land

for n in range(1,N+1):
    for j in joints:
        m.fj[n,j].fix(0) # no forces

# # LOW DROP Neutral position -----------------------------------------------------------------------------------------------------------------

# initial condition
for dof in DOFs:
    m.dq[1,dof].fix(0) # rest
    if dof not in ['y', 'thul1', 'thll1', 'thul2', 'thll2']:
        m.q[1,dof].fix(0) # neutral posture
m.q[1,'thul1'].fix(-0.25*np.pi)
m.q[1,'thll1'].fix(0.5*np.pi)
m.q[1,'thul2'].fix(-0.25*np.pi)
m.q[1,'thll2'].fix(0.5*np.pi)
m.footy[1, 'front'].fix(0.1) # start near the ground
m.footy[1, 'rear'].fix(0.1) # start near the ground

#m.footy[15, 'front'].fix(0) # force it to land
#m.footy[15, 'rear'].fix(0) # force it to land

for n in range(1,N+1):
    for j in joints:
        m.fj[n,j].fix(0) # no forces


# # # STANDING ------------------------------------------------------------------------------------------------------------------

# initial condition rest and neutral pose
for dof in DOFs:
    m.dq[1,dof].fix(0) # rest
    if dof not in ['y', 'thul1', 'thll1', 'thul2', 'thll2']:
        m.q[1,dof].fix(0) # neutral posture
# m.q[1,'thul1'].fix(-0.25*np.pi)
# m.q[1,'thll1'].fix(0.5*np.pi)
# m.q[1,'thul2'].fix(-0.25*np.pi)
# m.q[1,'thll2'].fix(0.5*np.pi)
# m.q[1, 'y'].setlb(0.4)
# m.q[1,'thul1'].setub(-0.25*np.pi)
# m.q[1,'thll1'].setlb(0.5*np.pi)
# m.q[1,'thul2'].setub(-0.25*np.pi)
# m.q[1,'thll2'].setlb(0.5*np.pi)

for n in range(1,N+1):
     # must stay grounded for the full time
    m.q[n, 'thb'].setlb(-0.01)
    m.q[n, 'thb'].setub(0.01)
    m.q[n, 'y'].fix(0.65)
    m.q[n, 'x'].fix(0)
    m.q[n,'thul1'].setub(-0.2*np.pi)
    m.q[n,'thll1'].setlb(0.5*np.pi)
    m.q[n,'thul2'].setub(-0.2*np.pi)
    m.q[n,'thll2'].setlb(0.5*np.pi)
    m.footy[n, 'front'].fix(0)
    m.footy[n, 'rear'].fix(0)

# for n in range(1,N+1):
#     for j in joints:
#         m.fj[n,j].fix(0) # no forces

# for n in range(1,N+1):
#     for j in joints:
#         if j != 'knee': # needs knee force to maintain ROM limits of prismatic joint
#             m.fj[n,j].fix(0) # no forces

import csv

def write_trajectory_to_csv(m, filename):
    with open(filename, 'w', newline='') as file:
        writer = csv.writer(file)
        decimal_places=6
        for n in m.N:
            if (n == 1):
                duration = 1
            else:
                duration = hm*m.h[n].value
            row = [
                0,  # j1 (always 0)
                round(m.q[n, 'thul1'].value, decimal_places),  # j2
                round(m.q[n, 'thll1'].value, decimal_places),  # j3
                0,  # j4 (always 0)
                round(m.q[n, 'thul1'].value, decimal_places),  # j5 (same as j2)
                round(m.q[n, 'thll1'].value, decimal_places),  # j6 (same as j3)
                0,  # j7 (always 0)
                round(m.q[n, 'thul2'].value, decimal_places),  # j8
                round(m.q[n, 'thll2'].value, decimal_places),  # j9
                0,  # j10 (always 0)
                round(m.q[n, 'thul2'].value, decimal_places),  # j11 (same as j8)
                round(m.q[n, 'thll2'].value, decimal_places),  # j12 (same as j9)
                round(duration, 4)  # duration
            ]
            writer.writerow(row)

# Usage:
# Assuming 'm' is your Pyomo model
write_trajectory_to_csv(m, 'trajectoryHop35q.csv')